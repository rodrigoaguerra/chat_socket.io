// import logo from './logo.svg';
import io from 'socket.io-client';
import './App.css';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import Box from '@mui/material/Box';
import AppBar from './Components/AppBar.tsx';
import Contacts from './Components/Contacts.tsx';
import Messages from './Components/Messages.tsx';
import InputAppBar from './Components/InputAppBar.tsx';
import store, { actions } from "./store.js";
import { Provider } from 'react-redux';

const users = [
  {
    id: 1,
    name: 'Brunch this week?',
    status: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    avatar: '/static/images/avatar/5.jpg',
  },
  {
    id: 2,
    name: 'Birthday Gift',
    status: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    avatar: '/static/images/avatar/1.jpg',
  },
  {
    id: 3,
    name: 'Recipe to try',
    status: 'I am try out this new BBQ recipe, I think this might be amazing',
    avatar: '/static/images/avatar/2.jpg',
  },
  {
    id: 4,
    name: 'Yes!',
    status: 'I have the tickets to the ReactConf for this year.',
    avatar: '/static/images/avatar/3.jpg',
  },
  {
    id: 5,
    name: "Doctor's Appointment",
    status: 'My appointment for the doctor was rescheduled for next Saturday.',
    avatar: '/static/images/avatar/4.jpg',
  },
  {
    id: 6,
    name: 'Discussion',
    status: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    avatar: '/static/images/avatar/5.jpg',
  },
  {
    id: 7,
    name: 'Summer BBQ',
    status: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    avatar: '/static/images/avatar/1.jpg',
  },
];

const socket = io('http://localhost:5000'); 
  
// recivied radom user
const randomIndex = Math.floor(Math.random() * users.length);

socket.on('connect', () => {
  // Emitir um evento para o servidor Socket.IO quando o usuÃ¡rio se conecta
  socket.emit('setUserData', users[randomIndex]);

  // recievied users
  socket.on('users', (data) => {
    store.dispatch(actions.users(data));
    store.dispatch(actions.incrementar(Object.keys(data).length));
  });

  // recievied messages
  socket.on('chat message', (data) => {
    console.log("chat message is:", data);
  }); 
});

const theme = createTheme();

function App() {
  return (
    <Provider store={store}> 
      <ThemeProvider theme={theme}>
        <Box sx={{ display: 'flex', height: '100vh' }}>
          <CssBaseline />
          <AppBar />
          <Contacts />
          <Messages  socket={socket} />
          <InputAppBar socket={socket} />
        </Box>
      </ThemeProvider>
    </Provider>
  );
}

export default App;
