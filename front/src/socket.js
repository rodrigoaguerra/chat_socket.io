import io from 'socket.io-client';
import store, { actions } from "./store.js";
function uniqueID() {
    return Math.floor(Math.random() * Math.floor(Math.random() * Date.now()))
}
  
const users = [
    {
      id: uniqueID(),
      name: 'Brunch this week?',
      status: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
      avatar: '/static/images/avatar/5.jpg',
    },
    {
      id: uniqueID(),
      name: 'Birthday Gift',
      status: `Do you have a suggestion for a good present for John on his work
        anniversary. I am really confused & would love your thoughts on it.`,
      avatar: '/static/images/avatar/1.jpg',
    },
    {
      id: uniqueID(),
      name: 'Recipe to try',
      status: 'I am try out this new BBQ recipe, I think this might be amazing',
      avatar: '/static/images/avatar/2.jpg',
    },
    {
      id: uniqueID(),
      name: 'Yes!',
      status: 'I have the tickets to the ReactConf for this year.',
      avatar: '/static/images/avatar/3.jpg',
    },
    {
      id: uniqueID(),
      name: "Doctor's Appointment",
      status: 'My appointment for the doctor was rescheduled for next Saturday.',
      avatar: '/static/images/avatar/4.jpg',
    },
    {
      id: uniqueID(),
      name: 'Discussion',
      status: `Menus that are generated by the bottom app bar (such as a bottom
        navigation drawer or overflow menu) open as bottom sheets at a higher elevation
        than the bar.`,
      avatar: '/static/images/avatar/5.jpg',
    },
    {
      id: uniqueID(),
      name: 'Summer BBQ',
      status: `Who wants to have a cookout this weekend? I just got some furniture
        for my backyard and would love to fire up the grill.`,
      avatar: '/static/images/avatar/1.jpg',
    },
  ];

// recivied radom user
const randomIndex = Math.floor(Math.random() * users.length);

const socket = io('http://localhost:5000'); 
  
socket.on('connect', () => {
  
  // recievied users
  socket.on('users', (data) => {
    store.dispatch(actions.users(data));
  });

  // recievied messages
  socket.on('chat message', (data) => {
    store.dispatch(actions.messages(data));
  }); 
});

export default socket;
